using Graduation_Project.API.Configuration;
using Graduation_Project.API.Data;
using Graduation_Project.API.Services;
using Graduation_Project.Shared.DTO;
using Graduation_Project.Shared.DTO.AnotherPaymentWay;
using Graduation_Project.Shared.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Stripe;

namespace Graduation_Project.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PaymentController : ControllerBase
    {
        private readonly ApplicationDatabaseContext _context;
        private readonly IPaymentService _paymentService;
        private readonly StripeSettings _stripeSettings;

        public PaymentController(IPaymentService paymentService , IOptions<StripeSettings> stripeSettings)
        {
            _paymentService = paymentService;
            _stripeSettings = stripeSettings.Value;
            StripeConfiguration.ApiKey = _stripeSettings.SecretKey;
        }

        //[HttpPost("process")]
        //public async Task<ActionResult<PaymentResponse>> Process(PaymentRequest request)
        //{
        //    var response = await _paymentService.ProcessPayment(request);
        //    if (response.Success)
        //    {
        //        return Ok(response); 
        //    }
        //    else
        //    {
        //        return BadRequest(response); 
        //    }
        //}

        [HttpPost("process-payment")]
        public async Task<IActionResult> ProcessPayment([FromBody] ProcessPaymentRequest request, CancellationToken cancellationToken, int studentId    )
        {
            if (request == null)
            {
                return BadRequest("Invalid payment request");
            }

            var response = await _paymentService.ProcessPaymentRequest(request, cancellationToken, studentId) ;

            if (response.Success)
            {
                return Ok(response);
            }
            else
            {
                return BadRequest(response.Message);
            }
        }

        //[HttpPost("charge")]
        //public async Task<IActionResult> Charge([FromBody] PaymentRequest paymentRequest)
        //{
        //    var options = new ChargeCreateOptions
        //    {
        //        Amount = paymentRequest.Amount,
        //        Currency = "usd",
        //        Source = "tok_us", // Token generated by Stripe.js
        //        Customer="bassel mohamed",
        //        Description = "hello bassel invoice"
        //    };

        //    var service = new ChargeService();
        //    try
        //    {
        //        var charge = await service.CreateAsync(options);
        //        // Handle successful charge
        //        return Ok("Payment successful");
        //    }
        //    catch (StripeException e)
        //    {
        //        // Handle Stripe error
        //        return BadRequest($"Payment failed: {e.Message}");
        //    }
        //}
    }

}


