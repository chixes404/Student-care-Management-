@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@page
@@model @Model.NamespaceName.@Model.PageModelClassName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.RazorPageName";
    @:ViewData["Entity"] = "@(Model.ModelMetadata.EntitySetName)";
    @:ViewData["BreadCrumb"] = "<a href='/@(Model.ModelMetadata.EntitySetName)' class='breadcrumb-item'>@(Model.ModelMetadata.EntitySetName)</a>";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
//@:<h1>@Model.RazorPageName</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.RazorPageName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}
<div class="card">

    <div class="card-header">
        <h5 class="card-title mb-0">View @Model.ViewDataTypeShortName Details</h5>
    </div>
    <div class="card-body">
        <div class="row">
            @{
                Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                {


                    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata propertyKey)
                        && propertyKey.Scaffold && !propertyKey.IsForeignKey && propertyKey.IsPrimaryKey)
                    {
                        <div class="col-lg-12">
                            <fieldset>
                                <div class="form-group row col-form-label">
                                    <label class="col-lg-2  fw-bold">
                                        @@Html.DisplayNameFor(model => model.@(Model.ModelTypeName).Id)
                                    </label>
                                    <div class="col-lg-10">
                                        @@Html.DisplayFor(model => model.@(Model.ModelTypeName).Id)
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    }

                    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                    {
                        <div class="col-lg-6">
                            <fieldset>
                                <div class="form-group row col-form-label">
                                    <label class="col-lg-4  fw-bold">
                                        @@Html.DisplayNameFor(model => model.@(Model.ModelTypeName).@GetValueExpression(property))
                                    </label>
                                    <div class="col-lg-8">
                                        @@Html.DisplayFor(model => model.@(Model.ModelTypeName).@GetValueExpression(property))
                                    </div>
                                 </div>
                            </fieldset>
                        </div>
                    }
                    else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                    {
                    <div class="col-lg-6">
                        <fieldset>
                            <div class="form-group row col-form-label">
                                <label class="col-lg-4  fw-bold">
                                    @@Html.DisplayNameFor(model => model.@(Model.ModelTypeName).@GetValueExpression(navigation))
                                </label>
                                <div class="col-lg-8">
                                    @@Html.DisplayFor(model => model.@(Model.ModelTypeName).@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    }
                }
            }    
        </div>
    </div>
    <div class="card-footer d-flex justify-content-between align-items-center bg-light border-top-0">
@{
    string pkName = GetPrimaryKeyName();
    if (pkName != null)
    {
        @:<a asp-page="./Index" class="btn btn-primary btn-labeled btn-labeled-start">
        @:    Back
        @:    <span class="btn-labeled-icon bg-black bg-opacity-20">
        @:        <i class="icon-arrow-left8"></i>
        @:    </span>
        @:</a>
        @:<a asp-page="./Edit" class="btn btn-primary btn-labeled btn-labeled-end" asp-route-id="@@Model.@(Model.ModelTypeName).@pkName">
        @:        Edit
        @:        <span class="btn-labeled-icon bg-black bg-opacity-20">
        @:            <i class="icon-pencil7"></i>
        @:        </span>
        @:    </a>
    }
    else
    {
    @:@@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    @:<a asp-page="./Index">Back to List</a>
    }
}</div>
</div>

@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
