@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Collections.Generic
@using System.Linq
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Authorization;
using Graduation_Project_Dashboard.Code;
using Graduation_Project_Dashboard.Services;
@{
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));

    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);
    }

    foreach (var namespaceName in Model.RequiredNamespaces)
    {
        @:using @namespaceName;
    }
}

namespace @Model.NamespaceName
{
    [Authorize(Roles = "Administrator")]
    public class @Model.PageModelClassName : BasePageModel<CreateModel>
    {
    private readonly @Model.ContextTypeName _context;
    private readonly UserResolverService _userService;

    public @(Model.PageModelClassName)(@Model.ContextTypeName context, UserResolverService userService)
    {
    _context = context;
    _userService = userService;
    }

    public IActionResult OnGet()
    {
    @{
        foreach (var property in relatedProperties.Values)
        {
            if (!((property.ForeignKeyPropertyNames[0] == "CreatedBy") || (property.ForeignKeyPropertyNames[0] == "UpdatedBy")))
            {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
            }
        }
    }
    return Page();
    }

    [BindProperty]
    public @Model.ViewDataTypeShortName @Model.ViewDataTypeShortName { get; set; } = default!;

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task<IActionResult>
        OnPostAsync()
        {

        var User = _context.Users.FirstOrDefault(u => u.Id == _userService.GetCurrentUserID());

        @(Model.ViewDataTypeShortName).Created = DateTime.Now;
        @(Model.ViewDataTypeShortName).CreatedBy = User.Id;
        @(Model.ViewDataTypeShortName).Updated = DateTime.Now;
        @(Model.ViewDataTypeShortName).UpdatedBy = User.Id;

        if (!ModelState.IsValid)
        {
        return Page();
        }

        _context.@(entitySetName).Add(@Model.ViewDataTypeShortName);
        await _context.SaveChangesAsync();

        return RedirectToPage("./Index");
        }
        }
        }
